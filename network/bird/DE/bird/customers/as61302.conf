function is_AS_HUIZE() 
prefix set AS_HUIZE;
prefix set AS_HUIZE_V4;
{

    include "/etc/bird/filters/AS-HUIZE.ipv4.conf";
    include "/etc/bird/filters/AS-HUIZE.conf"; #IRR过滤函数    
    case net.type {
        NET_IP4: 
            if net !~ AS_HUIZE_V4 then {
            print " net",net," is not from AS-HUIZE";
            return false;
        }
        NET_IP6:     
            if net !~ AS_HUIZE then {
            print " net",net," is not from AS-HUIZE";
            return false;
        }
    }
    return true;
} 


protocol bgp customer_AS61302 {
    graceful restart on;
    local as 134478; 
    neighbor 2a06:a005:951:6::1 as 61302;
    ipv6 {
        preference 115;
        next hop self;
        import filter{
            # 防止AS_PATH劫持            # Prevent BGP PATH Hijacking
            if (bgp_path.first != 61302 ) then {
                print "FILTERED_FIRST_AS_NOT_PEER_AS: ", net, " ", bgp_path;
                reject;
            }
            reject_transit_paths();
            # 防止NEXT_HOP劫持            # Prevent BGP NEXT_HOP Hijacking
            if !( from = bgp_next_hop ) then {
                    print "FILTERED_NEXT_HOP_NOT_PEER_IP: ", net, " ", bgp_path,"next_hop:"," ",bgp_next_hop ;
                    reject;
            }
            # RPKI验证            # RPKI validation
            if (roa_check(r6, net, bgp_path.last) = ROA_INVALID) then
            {
                    print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
                   reject;
            }
            # IRR validation
            # IRR验证            is_AS_HUIZE();
            bgp_large_community.delete([(134478, 2, *)]);
            bgp_large_community.delete([(134478, 1, *)]);
            bgp_large_community.delete([(134478, 3, *)]);
            bgp_large_community.add((134478, 3, 30000));
            bgp_large_community.add((134478, 2, 100));
            accept;
        };

        export filter{
            if bgp_export("member") then accept;
	    if bgp_large_community ~ [(134478, 3, *)] then accept;
        #accept;    
	reject;
        };
    };
} 


# protocol bgp customer_AS203472_v4 from tpl_bgp_v4 {
#     local as 134478;
#     neighbor 10.52.47.5 as 203472;
#     ipv4 {
#         preference 115;
#         table bgp_v4;
#         next hop self;
#         import filter{
#             # 防止AS_PATH劫持            # Prevent BGP PATH Hijacking
#             if (bgp_path.first != 203472 ) then {
#                 print "FILTERED_FIRST_AS_NOT_PEER_AS: ", net, " ", bgp_path;
#                 reject;
#             }
#             reject_transit_paths();
#             # 防止NEXT_HOP劫持            # Prevent BGP NEXT_HOP Hijacking
#             if !( from = bgp_next_hop ) then {
#                     print "FILTERED_NEXT_HOP_NOT_PEER_IP: ", net, " ", bgp_path,"next_hop:"," ",bgp_next_hop ;
#                     reject;
#             }
#             # RPKI验证            # RPKI validation
#             if (roa_check(r4, net, bgp_path.last) = ROA_INVALID) then
#             {
#                     print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
#                    reject;
#             }
#             # IRR validation
#             # IRR验证            is_AS203472();
#             bgp_large_community.delete([(134478, 2, *)]);
#             bgp_large_community.delete([(134478, 1, *)]);
#             bgp_large_community.delete([(134478, 3, *)]);
#             bgp_large_community.add((134478, 3, 32000));
#             bgp_large_community.add((134478, 2, 100));
#             accept;
#         };

#         export filter{
#             if bgp_export() then accept;
#             if bgp_large_community ~ [(134478, 3, *)] then accept;
#             reject;
#         };
#     };
# } 
