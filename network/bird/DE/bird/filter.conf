include "prefix.conf";
include "function.conf";
function bgp_import(string import_type){
	if !(import_type = "transit" || import_type="peering" || /*import_type="member" ||*/ import_type="ibgp") then {
		print "bgp_import: invalid import_type";
		return false;
	}
	# 不从其他地方接收自己的prefix
    if import_type != "ibgp" then{
        if is_in_my_net() then return false;
    }
	
    if is_bogon_prefix() || is_default() || (bgp_path.len > 100) then return false;

    if import_type = "transit" then {
		bgp_local_pref=500;
		bgp_large_community.delete([(LOCAL_BGPCOMM_AA, *, *)]);
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_AREA ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_COUNTRY ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 63000+LOCAL_ROUTER_ID ,0));
		bgp_path.delete([64512..65534,4200000000..4294967294]);
		return true;
	} else if import_type = "peering" then {
		bgp_local_pref=1000;
		bgp_path.delete([64512..65534,4200000000..4294967294]);
		bgp_large_community.delete([(LOCAL_BGPCOMM_AA, * ,*)]);
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_AREA ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_COUNTRY ,0));
		bgp_large_community.add((LOCAL_BGPCOMM_AA, 63000+LOCAL_ROUTER_ID ,0));
		if 6939 ~ bgp_path then return false;
		return true;
# 由于 MoeBee Network 不接受下游请求，代码废弃
	# } else if import_type = "member" then {
	# 	if !is_member_prefix() then return false;
	# 	bgp_local_pref=1500;
	# 	bgp_path.delete([64512..65534,4200000000..4294967294]);
	# 	bgp_large_community.delete([(LOCAL_BGPCOMM_AA, 63000..64999, *)]);
	# 	bgp_large_community.add((LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY ,0));
	# 	bgp_large_community.add((LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_AREA, 0));
	# 	bgp_large_community.add((LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_COUNTRY, 0));
	# 	bgp_large_community.add((LOCAL_BGPCOMM_AA, 63000+LOCAL_ROUTER_ID, 0));
	# 	bgp_large_community.add((LOCAL_BGPCOMM_AA, 60235, 0));
	# 	return true;
    }else if import_type = "ibgp" then {
		# iBGP 策略
		# 同一个前缀，跨城市、跨国家、跨区域低于本国本区
		# 跨国跨区的 member 高于本国本区非 member （自2022年4月29日起，不再接受任何下游的请求，所有有关member的代码将被注释掉）
		# 跨国跨区的 peering 高于本国本区非 peering
		# transit 跨国跨区永远最低
		# 2020年8月22日新增（暂时移除）
		# 欧洲不从北美接收亚太member/self前缀
		# 北美不从欧洲接收亚太member/self前缀
		# 欧美不从亚太接收欧美member/self前缀
		# 中国大陆固定选择香港作为出口
		# if ((LOCAL_BGPCOMM_AA, 60235, 0) ~ bgp_large_community) && (bgp_large_community ~ [(LOCAL_BGPCOMM_AA, 80, *)]) then {
		# 	#如果当前是欧洲，且转发自美洲，且来源是亚太，则拒绝
		# 	if LOCAL_CODE_AREA = 2 && ((LOCAL_BGPCOMM_AA, 80, 3) ~ bgp_large_community) && ((LOCAL_BGPCOMM_AA, 30001 ,0) ~ bgp_large_community) then return false;
		# 	#如果当前是欧洲，且转发自亚太，且来源是美洲，则拒绝
		# 	if LOCAL_CODE_AREA = 2 && ((LOCAL_BGPCOMM_AA, 80, 1) ~ bgp_large_community) && ((LOCAL_BGPCOMM_AA, 30003 ,0) ~ bgp_large_community) then return false;
		# 	#如果当前是美洲，且转发自欧洲，且来源是亚太，则拒绝
		# 	if LOCAL_CODE_AREA = 3 && ((LOCAL_BGPCOMM_AA, 80, 2) ~ bgp_large_community) && ((LOCAL_BGPCOMM_AA, 30001 ,0) ~ bgp_large_community) then return false;
		# 	#如果当前是美洲，且转发自亚太，且来源是欧洲，则拒绝
		# 	if LOCAL_CODE_AREA = 3 && ((LOCAL_BGPCOMM_AA, 80, 1) ~ bgp_large_community) && ((LOCAL_BGPCOMM_AA, 30002 ,0) ~ bgp_large_community) then return false;
		# }
		
		# 由于 MoeBee Network 不接受下游请求，代码废弃
		/* if (LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 member 地址，如果和接入路由在同一个城市
			bgp_local_pref=1450;
		} else if (LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 member 地址，如果和接入路由在同一个国家
			bgp_local_pref=1400;
		} else if (LOCAL_BGPCOMM_AA, 30000+LOCAL_CODE_AREA, 0) ~ bgp_large_community then {
			# iBGP 传过来的 member 地址，如果和接入路由在同一个区域
			bgp_local_pref=1350;
		} else if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, 30000..39999, *)]).len > 0 then {
			# iBGP 传过来的 member 地址，肯定是优先于别人那里收来的
			bgp_local_pref=1320;
		} else */ if (LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 peering 地址，如果和接入路由在同一个省份
			bgp_local_pref=950;
		} else if (LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 peering 地址，如果和接入路由在同一个国家
			bgp_local_pref=900;
		} else if (LOCAL_BGPCOMM_AA, 40000+LOCAL_CODE_AREA, 0) ~ bgp_large_community then {
			# iBGP 传过来的 peering 地址，如果和接入路由在同一个区域
			bgp_local_pref=850;
		} else if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, 40000..49999, *)]).len > 0 then {
			# iBGP 传过来的 peering 地址，肯定是优先于别人那里收来的
			bgp_local_pref=820;
		} else if (LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_STATE + LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 transit 地址，如果和接入路由在同一个省份
			bgp_local_pref=200;
		} else if (LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_COUNTRY, 0) ~ bgp_large_community then {
			# iBGP 传过来的 transit 地址，如果和接入路由在同一个国家
			bgp_local_pref=150;
		} else if (LOCAL_BGPCOMM_AA, 20000+LOCAL_CODE_AREA, 0) ~ bgp_large_community then {
			# iBGP 传过来的 transit 地址，如果和接入路由在同一个区域
			bgp_local_pref=100;
		} else if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, 20000..49999, *)]).len > 0 then {
			# iBGP 传过来的 transit 地址，肯定是优先于别人那里收来的
			bgp_local_pref=50;
		}
		# 中国大陆固定选择香港作为出口(弃用)
		#if LOCAL_CODE_COUNTRY = 8600 && ((LOCAL_BGPCOMM_AA, 28520, 0) ~ bgp_large_community) then {
		#	bgp_local_pref = 180;
		#}

        return true;
    }
}

function bgp_export(string export_type)
pair set communities_to_export;
{
    if !(export_type = "full" || export_type="default" || export_type="member" || export_type="ibgp" || export_type = "feed") then {
		print "bgp_export: invalid export_type";
		return false;
	}
    if export_type = "ibgp" then {
	# 只有 BGP 来的路由或者手动写了MQNET的 community 才传出 iBGP
		if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, * ,*)]).len = 0 && source != RTS_BGP then return false;
	#客户段添加地区community标识 （废弃）
		# if is_member_prefix() && ((LOCAL_BGPCOMM_AA, 60235, 0) ~ bgp_large_community) then bgp_large_community.add((LOCAL_BGPCOMM_AA, 80, LOCAL_CODE_AREA));
		return true;
		
	}else if export_type = "member" then {
	# member 一般向上游导出，因此只放出指定区域与路由的导出和客户段
		if is_in_my_net() then {
			bgp_large_community.add((LOCAL_BGPCOMM_AA,60234, 0)); # ospf来的表添加community
		}
	#只传递从下游接收的客户段（废弃）
		# if is_member_prefix() && !((LOCAL_BGPCOMM_AA, 60235, 0) ~ bgp_large_community) then return false;		
		
		communities_to_export=[
			(LOCAL_BGPCOMM_AA, 10000+LOCAL_CODE_AREA, *), # Anycast in specific area
			(LOCAL_BGPCOMM_AA, 10000+LOCAL_CODE_COUNTRY, *), # Anycast in specific country
			(LOCAL_BGPCOMM_AA, 61000+LOCAL_ROUTER_ID, *), # Export via specific router
			(LOCAL_BGPCOMM_AA, 60233, *), # Anycast Global
			(LOCAL_BGPCOMM_AA, 60234, *), # ospf
			(LOCAL_BGPCOMM_AA, 60235, *) # downstream
		];
		# 不是属于客户的 community 也不是属于MQNET的 prefix （废弃）
		# if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, 30000..39999, *)]).len = 0 && !is_member_prefix() && !is_in_my_net() then return false; 
		# 不属于自有的Prefix，拒绝
		if filter(bgp_large_community, [(LOCAL_BGPCOMM_AA, 30000..39999, *)]).len = 0 && !is_in_my_net() then return false; 

		# 既不是多处宣告，也不是当前路由导入的
		if filter(bgp_large_community, communities_to_export).len = 0 && !((LOCAL_BGPCOMM_AA, 63000+LOCAL_ROUTER_ID, 0) ~ bgp_large_community) then return false; 
        if is_bogon_prefix() || is_default() then return false;
		reject_small_prefixes();
        bgp_path.delete([64512..65534,4200000000..4294967294]);
		if is_in_my_net() then {
			if is_my_net() then return true;
			return false;
		}
		bgp_large_community.delete([(LOCAL_BGPCOMM_AA, *, *)]);
		return true;
		
    }else if export_type = "full" then {
		if is_in_my_net() then {
			bgp_large_community.add((LOCAL_BGPCOMM_AA,60234, 0)); # ospf来的表添加community
		}
		communities_to_export=[
			(LOCAL_BGPCOMM_AA, 10000..19999, *), # all anycast prefixes
			(LOCAL_BGPCOMM_AA, 20000..29999, *), # from transits
			(LOCAL_BGPCOMM_AA, 30000..39999, *), # members
			(LOCAL_BGPCOMM_AA, 40000..49999, *), # peering
			(LOCAL_BGPCOMM_AA, 60233, *), # Anycast Global
			(LOCAL_BGPCOMM_AA, 60234, *), # ospf
			(LOCAL_BGPCOMM_AA, 60235, *) # downstream
			
		 ];
		bgp_path.delete([64512..65534,4200000000..4294967294]);
		if is_in_my_net() then {
			if is_my_net() then return true;
			return false;
		}
		bgp_large_community.delete([(LOCAL_BGPCOMM_AA, *, *)]);
		return true;
		
    }else if export_type = "feed" then {
        if is_na() then return false;
		if is_in_my_net() then {
			if is_my_net() then return true;
			return false;
		}
		bgp_large_community.delete([(LOCAL_BGPCOMM_AA, *, *)]);
        return true;
    }

    return false;
}